import common.assertions as assertions
import common.logredirect as logredirect
import common.create_xml as cx
from xml.dom import minidom

from java.io import File

execfile('wlst/common.py')
execfile('wlst/apps.py')
execfile('wlst/createDomain.py')

def run(cfg):
		"""Create WebLogic Domain"""
		assertions.sanityCheckInstall(cfg)
		assertions.sanityCheckDomainConfig(cfg)
		xmlDoc = cx.run(cfg)
		if wlst_support:
			logredirect.setup()
			#print(cfg)
			#currentUser=__getOSUser()
			#definedUser=cfg.getProperty('wls.install.user')
			#__checkOSCertification(cfg)
			#if str(currentUser) == str(definedUser):
			create_domain(cfg, xmlDoc)
			#else:
			#	print("Please execute wlscli with user "+definedUser)
			#	sys.exit('Aborting..')
		else:
			raise Exception('WLST support required for this command')

def create_domain(configProperties, doc):
        domainPath=configProperties.getProperty('wls.domain.dir')
        domainName=configProperties.getProperty('wls.domain.name')   
        domainAppDir=configProperties.getProperty('wls.domain.app.dir')
        webLogicHome=configProperties.getProperty('wls.oracle.home')
        version=configProperties.getProperty('wls.version')
        try:
                if domainName=='':
                        log.error("wls.domain.name property can't be empty")
                        raise Exception('wls.domain.name property can not be empty')
                domainFullPath=str(domainPath) + '/' + str(domainName)
                #checkDomainExistence(domainFullPath)   
                
                log.info('Creating domain: ' + domainFullPath)
                
                __createDomain(doc)
               
        except Exception, error:
                log.error('Unable to create domain [' + str(domainPath) + '/' + str(domainName) + ']')
                raise error
		
def checkDomainExistence(domainPath):
        if File(domainPath).exists():
                raise Exception('Cannot create domain as it already exists at ' + domainPath)
                
def deployPegaApp(cfg):
        #assertions.sanityCheckInstall(cfg)
        #assertions.sanityCheckDomainConfig(cfg)
        #assertions.sanityCheckOnlineConfig(cfg)
        __connectAdminServer(cfg)
        edit()
        startEdit()
        try:
                deployApps(cfg)
        except Exception, error:
                print 'Unable to deploy applications : ' + str(error)
                cancelEdit('y')
        else:
                save()
                activate(block='true')
        disconnect()
                
def createUserConfig(configProperties):
        __connectAdminServer(configProperties)
        edit()
        startEdit()
        try:
                domainHome = configProperties.getProperty('wls.domain.dir')
                domainName = configProperties.getProperty('wls.domain.name')
                userconfig=domainHome+'/'+domainName+'/userconfig/user.config'
                userkey=domainHome+'/'+domainName+'/userconfig/user.key'
                storeUserConfig(userconfig, userkey)
        except Exception, error:
                print 'Unable to create userconfig : ' + str(error)
                cancelEdit('y')
        else:
                save()
                activate(block='true')
        #disconnect()


