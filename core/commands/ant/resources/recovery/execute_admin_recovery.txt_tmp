#!/bin/bash


PLATFORM_HOME="@@CONFIG_HOME@@"
USER="@@OS_USER@@"
ORACLE_HOME=""
ASERVER_HOME="@@ASERVER_HOME@@"
MSERVER_HOME="@@MSERVER_HOME@@"
WLS_VERSION="@@WLS_VERSION@@"
DOMAIN="@@DOMAIN_NAME@@"
ADMIN_HOST="@@ADMIN_HOST@@"
#MS_HOST="@@MS_HOST@@"
ADMINSERVER_NAME="@@ADMINSERVER_NAME@@"
NEW_HOST="@@NEW_MS_HOST@@"

if [ "$WLS_VERSION" == "wls12130" ]; then
	DOMAIN_HOME=$ASERVER_HOME
else
	DOMAIN_HOME=$MSERVER_HOME
fi

#GET LOCAL DIRECTORY PATH AND REMOTE DIRECTORY PATH
LOCAL_PATH="$PLATFORM_HOME/custom/resources/recovery"
REMOTE_PATH="$PLATFORM_HOME/custom/resources"

# Create environment virables
installbase=$(pwd)
ADMIN_SHORT=`echo $ADMIN_HOST | cut -d'.' -f 1`
ADMIN_UPPER=`echo $ADMIN_SHORT | awk '{print toupper($0)}'`
ADMIN_IP=`nslookup $ADMIN_HOST | tail -2 | cut -d' ' -f 2 | head -1`

#MS_SHORT=`echo $MS_HOST | cut -d'.' -f 1`
#MS_UPPER=`echo $MS_SHORT | awk '{print toupper($0)}'`
#MS_IP=`nslookup $MS_HOST | tail -2 | cut -d' ' -f 2 | head -1`

NEW_SHORT=`echo $NEW_HOST | cut -d'.' -f 1`
NEW_UPPER=`echo $NEW_SHORT | awk '{print toupper($0)}'`
NEW_IP=`nslookup $NEW_HOST | tail -2 | cut -d' ' -f 2 | head -1`



function test_ssh_connection(){
	echo "Testing connection to ${NEW_SHORT}..."
	ssh -n -o NumberOfPasswordPrompts=0 ${USER}@${NEW_SHORT}
	if [ "$?" -ne "0" ]; then
	  echo "FATAL: You do not have passwordless ssh working."
	  echo "Try running ssh-add."
	  exit 1
	fi
}

# check if run by website
function check_user(){
	if [[ $USER -ne "$USER" ]]
	then
		echo "Not running by $USER"
		exit
	fi
}

function check_remote_dir() {
	echo -e "\ntesting remote directory: $REMOTE_PATH "

	if ssh $USER@$NEW_SHORT "[ ! -d $REMOTE_PATH ]"; then
			printf "\nCreating: $REMOTE_PATH on $USER@$NEW_SHORT\n"
			ssh $USER@$NEW_SHORT "mkdir -p $REMOTE_PATH"
	else
			printf "[OK]\n"
	fi
}

function stop_adminserver(){
	# Shutdown adminserver
	echo "shutdown adminserver"
	pid_count=`ps -ef | grep "$ADMINSERVER_NAME" | grep -v grep | wc -l`
	if [ "$pid_count" == 1 ]; then
		$DOMAIN_HOME/${DOMAIN}/bin/stopWebLogic.sh
	else
		echo "$DOMAIN already shutdown.."
	fi
}
##----TO DO ---->Check if we Need to shutdown Managed Server on this host --
# tar the DOMAIN directory
function domainTar(){
	cd $DOMAIN_HOME
	echo "tar the $DOMAIN folder..."
	if [ -f $DOMAIN.tar ]; then
		rm $DOMAIN.tar
	fi
	#tar -czvf $DOMAIN.tar $DOMAIN --exclude=$DOMAIN/servers* --exclude=$DOMAIN/tmp --exclude=$DOMAIN/*.tar --exclude=$DOMAIN/core.* --exclude=$DOMAIN/*.hprof --exclude=$DOMAIN/config/config_bootstrap.xml
#	tar czf $DOMAIN.tar $DOMAIN
	tar -czvf $DOMAIN.tar $DOMAIN --exclude=$DOMAIN/servers* --exclude=$DOMAIN/tmp --exclude=$DOMAIN/*.tar --exclude=$DOMAIN/core.* --exclude=$DOMAIN/*.hprof --exclude=$DOMAIN/config/config_bootstrap.xml
	mv $DOMAIN.tar $LOCAL_PATH
}


function scp_to_remote(){
	scp -r $LOCAL_PATH $USER@$NEW_SHORT:$REMOTE_PATH
	if [ "$?" -ne "0" ]; then
	  echo "An error occurred."
	else
	  echo "Successfully copied $REMOTE_PATH to $NEW_SHORT"
	fi
}

function execute_remote_recovery_scripts(){
	 ssh $USER@$NEW_SHORT "$LOCAL_PATH/admin_recovery.sh"
}

# Start adminserver
function start_adminserver(){
	#echo "Restart Adminserver $DOMAIN"
	cd $DOMAIN_HOME/${DOMAIN}/bin
	pid_count=`ps -ef | grep "$ADMINSERVER_NAME" | grep -v grep | wc -l`
	if [ "$pid_count" == 1 ]; then
		echo "Restarting $DOMAIN.."
		$DOMAIN_HOME/${DOMAIN}/bin/stopWebLogic.sh
		$DOMAIN_HOME/${DOMAIN}/bin/startadmin.sh
	else
		echo "Starting $DOMAIN.."
		$DOMAIN_HOME/${DOMAIN}/bin/startadmin.sh
	fi
	echo "admin_recovery script finished"
}


test_ssh_connection
check_user
check_remote_dir
domainTar
scp_to_remote
execute_remote_recovery_scripts
#start_adminserver
